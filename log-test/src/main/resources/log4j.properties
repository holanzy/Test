### 输出格式解释：
### [%-d{yyyy-MM-dd HH:mm:ss}][Class: %c.%M(%F:%L)] %n[Level: %-5p] - Msg: %m%n

### %d{yyyy-MM-dd HH:mm:ss}: 时间，大括号内是时间格式
### %c: 全类名
### %M: 调用的方法名称
### %F:%L  类名:行号（在控制台可以追踪代码）
### %n: 换行
### %p: 日志级别，这里%-5p是指定的5个字符的日志名称，为的是格式整齐
### %m: 日志信息

log.file.paht=D:/soft/git-repertory/Test/log-test/src/main/resources/testlog.log

### 设置logger级别 ###
log4j.rootLogger=INFO,R,D,E,debug,stdout
log4j.debug=debug
log4j.appender.R=org.apache.log4j.RollingFileAppender
log4j.appender.R.File= ${log.file.paht}
#后缀可以是KB, MB 或者是 GB. 在日志文件到达该大小时，将会自动滚动，即将原来的内容移到mylog.log.1文件
log4j.appender.R.MaxFileSize=100KB
#指定可以产生的滚动文件的最大数
log4j.appender.R.MaxBackupIndex=5
log4j.appender.R.layout=org.apache.log4j.PatternLayout
log4j.appender.R.layout.ConversionPattern=[%d{yyyy-MM-dd HH\:mm\:ss.SSSS}][1Class:%c.%M(%F:%L)][Level: %-5p] - %m%n

### appender.D输出Debug信息到日志文件 E://logs/error.log ###,每天产生一个日志文件
log4j.appender.D = org.apache.log4j.DailyRollingFileAppender
log4j.appender.D.File = ${log.file.paht}
log4j.appender.D.Append = true
#指定日志消息的输出最低层次
log4j.appender.D.Threshold = DEBUG
log4j.appender.D.layout = org.apache.log4j.PatternLayout
log4j.appender.D.layout.ConversionPattern = [%d{yyyy-MM-dd HH\:mm\:ss.SSSS}][2Class:%c.%M(%F:%L)][Level: %-5p] - %m%n

### appender.D输出Error信息到日志文件 E://logs/error.log ###
log4j.appender.E = org.apache.log4j.DailyRollingFileAppender
log4j.appender.E.File = ${log.file.paht}
log4j.appender.E.Append = true
log4j.appender.E.Threshold = ERROR
log4j.appender.E.layout = org.apache.log4j.PatternLayout
log4j.appender.E.layout.ConversionPattern = [%d{yyyy-MM-dd HH\:mm\:ss.SSSS}][3Class:%c.%M(%F:%L)][Level: %-5p] - %m%n

### appender.stdout输出到控制台 ###
log4j.appender.stdout = org.apache.log4j.ConsoleAppender
log4j.appender.stdout.Target = System.out
log4j.appender.stdout.layout = org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern = [%d{yyyy-MM-dd HH\:mm\:ss.SSSS}][4Class:%c.%M(%F:%L)][Level: %-5p] - %m%n